name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: read  # Required for GitHub Packages authentication

    env:
      # Supabase Configuration
      VITE_SUPABASE_URL: ${{ vars.VITE_SUPABASE_URL }}
      VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}

      # SmartSuite Configuration
      VITE_SMARTSUITE_API_KEY: ${{ secrets.VITE_SMARTSUITE_API_KEY }}
      VITE_SMARTSUITE_WORKSPACE_ID: ${{ vars.VITE_SMARTSUITE_WORKSPACE_ID }}
      VITE_SMARTSUITE_PROJECTS_TABLE: ${{ vars.VITE_SMARTSUITE_PROJECTS_TABLE }}
      VITE_SMARTSUITE_VIDEOS_TABLE: ${{ vars.VITE_SMARTSUITE_VIDEOS_TABLE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@elevanaltd'
          always-auth: true
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ========== LOCAL SUPABASE SETUP FOR TESTS ==========
      # Local Supabase instance eliminates rate limits and provides isolated test environment
      # Test users are seeded automatically, matching local development workflow

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start local Supabase instance
        run: supabase start

      - name: Create test users in local database
        run: |
          # Create admin, client, and unauthorized test users with user_profiles
          supabase db execute --file supabase/create-test-users.sql

          # Verify users were created
          echo "=== Test users created ==="
          supabase db execute --sql "SELECT email, role FROM public.user_profiles WHERE email LIKE '%test%' ORDER BY email;"

      - name: Override environment variables for local Supabase
        run: |
          # Use local Supabase instead of production for tests
          echo "VITE_SUPABASE_URL=http://127.0.0.1:54321" >> $GITHUB_ENV
          echo "VITE_SUPABASE_PUBLISHABLE_KEY=$(supabase status -o json | jq -r '.anon_key')" >> $GITHUB_ENV

          # Verify configuration
          echo "=== Local Supabase Configuration ==="
          echo "URL: http://127.0.0.1:54321"
          echo "Key: $(supabase status -o json | jq -r '.anon_key')"
      # ========== END LOCAL SUPABASE SETUP ==========

      # Temporarily disabled during GitHub Packages migration - package-lock.json will be generated by CI
      # - name: Validate lock file sync
      #   run: |
      #     # Detect package.json/package-lock.json desynchronization
      #     if ! npm install --package-lock-only --dry-run &>/dev/null; then
      #       echo "❌ ERROR: package-lock.json is out of sync with package.json"
      #       echo ""
      #       echo "This typically happens when package.json is updated but 'npm install' wasn't run."
      #       echo ""
      #       echo "To fix this issue:"
      #       echo "  1. Run 'npm install' locally"
      #       echo "  2. Commit the updated package-lock.json"
      #       echo "  3. Push your changes"
      #       exit 1
      #     fi
      #     echo "✅ Lock file is synchronized"

      - name: Install dependencies
        run: npm install  # Using npm install instead of npm ci to generate package-lock.json
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug - Verify shared-lib installation
        run: |
          echo "=== Checking if @elevanaltd/shared-lib was installed ==="
          if [ -d "node_modules/@elevanaltd/shared-lib" ]; then
            echo "✅ Package directory exists"
            echo ""
            echo "=== Package.json exports field ==="
            cat node_modules/@elevanaltd/shared-lib/package.json | grep -A 20 '"exports"'
            echo ""
            echo "=== Directory structure ==="
            ls -la node_modules/@elevanaltd/shared-lib/
            echo ""
            echo "=== dist/client structure ==="
            ls -la node_modules/@elevanaltd/shared-lib/dist/client/ || echo "❌ dist/client/ does not exist"
          else
            echo "❌ Package directory does NOT exist"
            echo "=== Installed @elevanaltd packages ==="
            ls -la node_modules/@elevanaltd/ || echo "❌ No @elevanaltd scope in node_modules"
          fi

      - name: TypeScript check
        run: npm run typecheck

      - name: ESLint check
        run: npm run lint

      - name: Run tests
        run: npm run test -- --run

      - name: Build
        run: npm run build

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist/
          retention-days: 7
