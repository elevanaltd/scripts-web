name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: read  # Required for GitHub Packages authentication

    env:
      # Supabase Configuration
      VITE_SUPABASE_URL: ${{ vars.VITE_SUPABASE_URL }}
      VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}

      # SmartSuite Configuration
      VITE_SMARTSUITE_API_KEY: ${{ secrets.VITE_SMARTSUITE_API_KEY }}
      VITE_SMARTSUITE_WORKSPACE_ID: ${{ vars.VITE_SMARTSUITE_WORKSPACE_ID }}
      VITE_SMARTSUITE_PROJECTS_TABLE: ${{ vars.VITE_SMARTSUITE_PROJECTS_TABLE }}
      VITE_SMARTSUITE_VIDEOS_TABLE: ${{ vars.VITE_SMARTSUITE_VIDEOS_TABLE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@elevanaltd'
          always-auth: true
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ========== LOCAL SUPABASE SETUP FOR TESTS ==========
      # Local Supabase instance eliminates rate limits and provides isolated test environment
      # Test users are seeded automatically, matching local development workflow

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start local Supabase instance
        run: |
          # Retry logic for transient Docker/network failures
          MAX_ATTEMPTS=3
          ATTEMPT=1

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "=== Attempt $ATTEMPT of $MAX_ATTEMPTS: Starting Supabase ==="

            # Clean any previous failed attempts
            if [ $ATTEMPT -gt 1 ]; then
              echo "Cleaning up from previous attempt..."
              supabase stop --no-backup || true
              docker system prune -f || true
              sleep 5
            fi

            # Start with extended timeout and debug output
            if timeout 300 supabase start; then
              echo "✅ Supabase started successfully"

              # Wait for GoTrue to be ready (health check)
              echo "=== Waiting for GoTrue to be ready ==="
              if timeout 60 bash -c 'until curl -f http://127.0.0.1:54321/auth/v1/health > /dev/null 2>&1; do echo "Waiting for GoTrue..."; sleep 2; done'; then
                echo "✅ GoTrue is ready"
                break
              else
                echo "❌ GoTrue health check timeout"
                supabase status || true
              fi
            else
              echo "❌ Supabase start failed or timed out"
              supabase status || true
            fi

            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "❌ All attempts failed. Showing container logs..."
              docker ps -a
              docker logs supabase_db_dev 2>&1 | tail -50 || true
              docker logs supabase_auth_dev 2>&1 | tail -50 || true
              exit 1
            fi

            ATTEMPT=$((ATTEMPT + 1))
            echo "Retrying in 10 seconds..."
            sleep 10
          done

      - name: Apply database migrations
        run: |
          # EMERGENCY FIX 2025-10-26: Use db reset to ensure trigger functions apply correctly
          # db push has issues with complex trigger function syntax (COALESCE → IF/ELSE replacement)
          # db reset ensures clean migration application including function replacements
          supabase db reset --local

          echo "=== Schema initialized via db reset (all migrations applied) ==="
          echo "=== Test users will be created after npm install ==="

      - name: Override environment variables for local Supabase
        run: |
          # Use local Supabase instead of production for tests
          echo "VITE_SUPABASE_URL=http://127.0.0.1:54321" >> $GITHUB_ENV
          echo "VITE_SUPABASE_PUBLISHABLE_KEY=$(supabase status -o json | jq -r '.ANON_KEY')" >> $GITHUB_ENV

          # Verify configuration
          echo "=== Local Supabase Configuration ==="
          echo "URL: http://127.0.0.1:54321"
          echo "Anon Key: $(supabase status -o json | jq -r '.ANON_KEY' | head -c 20)..."
      # ========== END LOCAL SUPABASE SETUP ==========

      # Temporarily disabled during GitHub Packages migration - package-lock.json will be generated by CI
      # - name: Validate lock file sync
      #   run: |
      #     # Detect package.json/package-lock.json desynchronization
      #     if ! npm install --package-lock-only --dry-run &>/dev/null; then
      #       echo "❌ ERROR: package-lock.json is out of sync with package.json"
      #       echo ""
      #       echo "This typically happens when package.json is updated but 'npm install' wasn't run."
      #       echo ""
      #       echo "To fix this issue:"
      #       echo "  1. Run 'npm install' locally"
      #       echo "  2. Commit the updated package-lock.json"
      #       echo "  3. Push your changes"
      #       exit 1
      #     fi
      #     echo "✅ Lock file is synchronized"

      - name: Install dependencies
        run: npm install  # Using npm install instead of npm ci to generate package-lock.json
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create test users via Auth Admin API
        run: |
          # IMPORTANT: Must run AFTER npm install (@supabase/supabase-js dependency)
          # Use Supabase Auth Admin API instead of direct SQL
          # This ensures proper GoTrue internal state (auth.users + auth.identities)
          # See: scripts/create-test-users-via-api.mjs for implementation details

          # Extract service role key from Supabase CLI (uppercase field name)
          export SUPABASE_SERVICE_ROLE_KEY=$(supabase status -o json | jq -r '.SERVICE_ROLE_KEY')

          # Debug: Verify key was extracted (first 20 chars only)
          echo "Service role key extracted: ${SUPABASE_SERVICE_ROLE_KEY:0:20}..."

          # Run Node.js script to create users via Auth API
          node scripts/create-test-users-via-api.mjs

          echo "=== Test users created via Auth Admin API ==="

      - name: Seed test data (projects, videos, scripts)
        run: |
          # Seed test data AFTER users exist
          # seed.sql has TRUNCATE commands that won't affect auth.users
          psql "postgresql://postgres:postgres@127.0.0.1:54322/postgres" < supabase/seed.sql

          echo "=== Test data seeded ==="

      - name: Debug - Verify shared-lib installation
        run: |
          echo "=== Checking if @elevanaltd/shared-lib was installed ==="
          if [ -d "node_modules/@elevanaltd/shared-lib" ]; then
            echo "✅ Package directory exists"
            echo ""
            echo "=== Package.json exports field ==="
            cat node_modules/@elevanaltd/shared-lib/package.json | grep -A 20 '"exports"'
            echo ""
            echo "=== Directory structure ==="
            ls -la node_modules/@elevanaltd/shared-lib/
            echo ""
            echo "=== dist/client structure ==="
            ls -la node_modules/@elevanaltd/shared-lib/dist/client/ || echo "❌ dist/client/ does not exist"
          else
            echo "❌ Package directory does NOT exist"
            echo "=== Installed @elevanaltd packages ==="
            ls -la node_modules/@elevanaltd/ || echo "❌ No @elevanaltd scope in node_modules"
          fi

      - name: TypeScript check
        run: npm run typecheck

      - name: ESLint check
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit -- --run

      - name: Capture Supabase logs on test failure
        if: failure()
        run: |
          echo "=== Supabase Auth Logs ==="
          docker logs supabase_auth_dev || echo "❌ Auth logs not available"
          echo ""
          echo "=== Supabase DB Logs ==="
          docker logs supabase_db_dev || echo "❌ DB logs not available"
          echo ""
          echo "=== Supabase Status ==="
          supabase status || echo "❌ Status not available"

      - name: Build
        run: npm run build

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist/
          retention-days: 7

  # ============================================================================
  # TIER 2: PREVIEW INTEGRATION TESTS
  # ============================================================================
  # Protocol: SUPABASE_PREVIEW_TESTING (v1.0.0)
  # Purpose: Full integration tests against Supabase Preview Branch
  # Pattern: Wait for preview ready → test with Auth Admin API → full E2E
  #
  # Preview branch provides:
  # - Full Auth system (operational, production-like)
  # - Isolated database with RLS policies
  # - Separate API URL/keys per PR
  # - Auto-destroyed on PR merge/close
  # ============================================================================

  preview-integration-tests:
    name: Preview Branch Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: quality-gates
    permissions:
      contents: read

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for Supabase Preview to be ready
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-preview
        with:
          checkName: 'Supabase Preview'
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          timeoutSeconds: 600
          intervalSeconds: 10

      - name: Fail if Preview deployment failed
        if: steps.wait-for-preview.outputs.conclusion != 'success'
        run: |
          echo "❌ Supabase Preview deployment failed or timed out"
          echo "Status: ${{ steps.wait-for-preview.outputs.conclusion }}"
          exit 1

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Export Preview Branch environment variables
        run: |
          # Login with access token
          echo "$SUPABASE_ACCESS_TOKEN" | supabase login --token -

          # Get preview branch environment for current PR
          # This exports: SUPABASE_URL, SUPABASE_ANON_KEY, SUPABASE_SERVICE_ROLE_KEY, etc.
          supabase --experimental branches get "${{ github.head_ref }}" -o env >> $GITHUB_ENV

          echo "✅ Preview environment variables exported"
          echo "Preview URL: ${{ env.SUPABASE_URL }}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@elevanaltd'
          always-auth: true
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure app for Preview Branch
        run: |
          echo "VITE_SUPABASE_URL=${{ env.SUPABASE_URL }}" >> $GITHUB_ENV
          echo "VITE_SUPABASE_PUBLISHABLE_KEY=${{ env.SUPABASE_ANON_KEY }}" >> $GITHUB_ENV

          echo "✅ App configured for preview environment"

      - name: Create test users in Preview via Auth Admin API
        run: |
          # Preview has baseline seed.sql already applied (runs once at creation)
          # Now create test users via Auth Admin API (per-run data)

          export VITE_SUPABASE_URL=${{ env.SUPABASE_URL }}
          export SUPABASE_SERVICE_ROLE_KEY=${{ env.SUPABASE_SERVICE_ROLE_KEY }}

          node scripts/create-test-users-via-api.mjs

          echo "✅ Test users created in preview environment"

      - name: Run integration tests against Preview
        run: npm run test:integration -- --run
        env:
          VITE_SUPABASE_URL: ${{ env.SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ env.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ env.SUPABASE_SERVICE_ROLE_KEY }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: preview-test-results
          path: coverage/
          retention-days: 7
